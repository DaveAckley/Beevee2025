quark TermTargetLibrary + DTU + QDebugUtils + Fail {
  typedef C2D.Coord C2DC;
  Self(QDebugUtils& other) { takeDebug(other); }
  constant ClassId cTARGET_IDS[] = {
    SUPR.classidof,  //<  0 Upwards Omnidirectional Red Detector
    SUPY.classidof,  //<  1 Upwards Omnidirectional Yellow Detector
    SLFR.classidof,  //<  2 Left Front Red Detector
    SLFY.classidof,  //<  3 Left Front Yellow Detector
    SRFR.classidof,  //<  4 Right Front Red Detector
    SRFY.classidof,  //<  5 Right Front Yellow Detector
    MLRF.classidof,  //<  6 Left Rear Motor Forward
    MRRF.classidof,  //<  7 Right Rear Motor Forward
    GRIP.classidof,  //<  8 Grip Controller
    TOCK.classidof,  //<  9 Clock Antipode to Grip Controller
    SLLY.classidof,  //< 10 Left Left-side Yellow Detector
    SLRY.classidof,  //< 11 Left Right-side Yellow Detector
    SRLY.classidof,  //< 12 Right Left-side Yellow Detector
    SRRY.classidof,  //< 13 Right Right-side Yellow Detector
    MLEY.classidof,  //< 14 Left Eyestalk angle Motor
    MREY.classidof,  //< 15 Right Eyestalk angle Motor
    SFLG.classidof,  //< 16 Front Left Floor Grey Sensor
    SFRG.classidof,  //< 17 Front Right Floor Grey Sensor
    SRLG.classidof,  //< 18 Rear Left Floor Grey Sensor
    SRRG.classidof,  //< 19 Rear Right Floor Grey Sensor
    HFLG.classidof,  //< 20 Front Left Grey PLL
    HFRG.classidof,  //< 21 Front Right Grey PLL
    HRLG.classidof,  //< 22 Rear Left Grey PLL
    HRRG.classidof,  //< 23 Rear Right Grey PLL
    SDBG10.classidof,  //< 24 Sensor Debug 10
    MDBG10.classidof,  //< 25 Motor Debug 10
    /*
    HALT.classidof,  //< 26 xbar tap propagation barrier
    */
  };
  constant Unsigned cTARGETS = cTARGET_IDS.lengthof;

  TapIdx getTapIdx(TAP & tap) {
    ClassUtils cu;
    ClassId cid = cu.getClassId(tap);
    Unsigned idx = getTapIdxFromClassId(cid);
    if (idx == idx.maxof) fail(__FILE__,__LINE__);
    return (TapIdx) idx;
  }

  Unsigned getTapIdxFromClassId(ClassId cid) {
    BeeveeBIM bvb;
    return bvb.getTapIdxFromClassId(cid);
  }

  TapIdx getAxonDestTapIdxFromTapIdx(Unsigned tapidx) {
    return cAXON[tapidx]; // or fail if tapidx >= cTARGET_IDS.lengthof
  }

  ClassId getClassIdFromTapIdx(Unsigned tapidx) {
    BeeveeBIM bim;
    return bim.getTAPClassIdFromTapIdx(tapidx);
    //    return cTARGET_IDS[tapidx]; // or fail if tapidx >= cTARGET_IDS.lengthof
  }

  XBSSy getXBSSyFromTapIdx(Unsigned tapidx) {
    return cSYMS[tapidx]; // or fail if tapidx >= cSYMS.lengthof
  }

  String getClassNameFromTapIdx(Unsigned tapidx) {
    ClassId cid = getClassIdFromTapIdx(tapidx);
    ClassUtils cu;
    return cu.getClassName(cid,false,true);
  }

  /*
  Atom makeTAPInstance(Unsigned tapidx) {
    ClassId tapid = getClassIdFromTapIdx(tapidx);
    ClassUtils cu;
    Int etype = cu.getElementType(tapid);
    if (etype < 0) die();
    AtomUtils au;
    Atom a = au.new(etype);
    if (a as TAP) {
      XBSSy sym = getXBSSyFromTapIdx(tapidx);
      a.mSenseVert = (sym == cXSV);
    }
    return a;
  }
  */

  /*


   -7-2  -6-2  -5-2  -4-2  -3-2  -2-2  -1-2  +0-2  +1-2  +2-2  +3-2  +4-2  +5-2  +6-2  +7-2

               GRIP  SLFR  SLFY  SRFR  SRFY  SLLY  SLRY  SRLY  SRRY  SUPR  SUPY  TOCK
   -7-1  -6-1  -5-1  -4-1  -3-1  -2-1  -1-1  +0-1  +1-1  +2-1  +3-1  +4-1  +5-1  +6-1  +7-1

               MLRF
   -7+0  -6+0  -5+0  -4+0  -3+0  -2+0  -1+0  +0+0  +1+0  +2+0  +3+0  +4+0  +5+0  +6+0  +7+0

               MRRF
   -7+1  -6+1  -5+1  -4+1  -3+1  -2+1  -1+1  +0+1  +1+1  +2+1  +3+1  +4+1  +5+1  +6+1  +7+1

               MLEY
   -7+2  -6+2  -5+2  -4+2  -3+2  -2+2  -1+2  +0+2  +1+2  +2+2  +3+2  +4+2  +5+2  +6+2  +7+2

               MREY
   -7+3  -6+3  -5+3  -4+3  -3+3  -2+3  -1+3  +0+3  +1+3  +2+3  +3+3  +4+3  +5+3  +6+3  +7+3


   -7+4  -6+4  -5+4  -4+4  -3+4  -2+4  -1+4  +0+4  +1+4  +2+4  +3+4  +4+4  +5+4  +6+4  +7+4


   -7+5  -6+5  -5+5  -4+5  -3+5  -2+5  -1+5  +0+5  +1+5  +2+5  +3+5  +4+5  +5+5  +6+5  +7+5
..
  */
  // Mon Aug  5 02:27:31 2024 Move 2nd xb farther west
  // Mon Aug  5 01:43:28 2024 Add axon generation
  //                                  SUPR SUPY SLFR SLFY SRFR SRFY MLRF MRRF GRIP TOCK SLLY SLRY SRLY SRRY MLEY MREY SFLG SFRG SRLG SRRG HDGF HDGR
  constant C2DC cDESTS_X[cTARGETS] = {  +4,  +5,  -4,  -3,  -2,  -1,  -5,  -5, -5,  +6,  +0,  +1,  +2,  +3,  -5,  -5, -10, -10, -10, -10,-11,-10  };
  constant C2DC cDESTS_Y[cTARGETS] = {  -1,  -1,  -1,  -1,  -1,  -1,  +0,  +1, -1,  -1,  -1,  -1,  -1,  -1,  +2,  +3,  +0,  +1,  +2,  +3, -1, -1  };
  constant XBSSy cSYMS[cTARGETS] =   {cXSU,cXSU,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSV,cXSV,cXSV,cXSV,cXSV,cXSV};
  constant TapIdx cXN = cTAPIDX_NONE;
  constant TapIdx cAXON[cTARGETS] =  { cXN, cXN, cXN, cXN, cXN, cXN, cXN, cXN, cXN, cXN, cXN, cXN, cXN, cXN, cXN, cXN, cXN, cXN, cXN, cXN,  6u, 7u };
  // Sat Jul 27 14:48:06 2024 test swapped symmetry on grey xb
  //                                  SUPR SUPY SLFR SLFY SRFR SRFY MLRF MRRF GRIP TOCK SLLY SLRY SRLY SRRY MLEY MREY SFLG SFRG SRLG SRRG HDGF HDGR
  //constant C2DC cDESTS_X[cTARGETS] = {  +4,  +5,  -4,  -3,  -2,  -1,  -5,  -5, -5,  +6,  +0,  +1,  +2,  +3,  -5,  -5,  -8,  -8,  -8,  -8, -9, -8  };
  //constant C2DC cDESTS_Y[cTARGETS] = {  -1,  -1,  -1,  -1,  -1,  -1,  +0,  +1, -1,  -1,  -1,  -1,  -1,  -1,  +2,  +3,  +0,  +1,  +2,  +3, -1, -1  };
  //constant XBSSy cSYMS[cTARGETS] =   {cXSU,cXSU,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSV,cXSV,cXSV,cXSV,cXSV,cXSV};

  // Sat Jul 27 02:32:36 2024 Add xb sym initializations
  // Mon Jul 22 14:10:03 2024 Move grey sensors again, add grey diff hidden
  // Mon Jul 22 03:06:47 2024 Move grey sensors
  //                                  SUPR SUPY SLFR SLFY SRFR SRFY MLRF MRRF GRIP TOCK SLLY SLRY SRLY SRRY MLEY MREY SFLG SFRG SRLG SRRG HDGF HDGR
//constant C2DC cDESTS_X[cTARGETS] = {  +4,  +5,  -4,  -3,  -2,  -1,  -5,  -5, -5,  +6,  +0,  +1,  +2,  +3,  -5,  -5,  -12,-11, -10,  -9, -8, -8  };
//constant C2DC cDESTS_Y[cTARGETS] = {  -1,  -1,  -1,  -1,  -1,  -1,  +0,  +1, -1,  -1,  -1,  -1,  -1,  -1,  +2,  +3,  -1,  -1,  -1,  -1, +0, +1  };
//constant XBSSy cSYMS[cTARGETS] =   {cXSU,cXSU,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH,cXSH};
  // Fri Jul 12 08:23:25 2024 Layout211: Add the grey sensors
  //                                  SUPR SUPY SLFR SLFY SRFR SRFY MLRF MRRF GRIP TOCK SLLY SLRY SRLY SRRY MLEY MREY SFLG SFRG SRLG SRRG
  //constant C2DC cDESTS_X[cTARGETS] = {  +4,  +5,  -4,  -3,  -2,  -1,  -5,  -5, -5, +6,  +0,  +1,  +2,  +3,  -5,  -5,  +15, +14, +13, +12  };
  //constant C2DC cDESTS_Y[cTARGETS] = {  -1,  -1,  -1,  -1,  -1,  -1,  +0,  +1, -1, -1,  -1,  -1,  -1,  -1,  +2,  +3,  -1,  -1,  -1,  -1   };



  /*


   -7-2  -5-2  -5-2  -4-2  -3-2  -2-2  -1-2  +0-2  +1-2  +2-2  +3-2  +4-2  +5-2  +6-2  +7-2

               GRIP  SLFR  SLFY  SRFR  SRFY  SLLY  SLRY  SRLY  SRRY  SUPR  SUPY  TOCK
   -7-1  -5-1  -5-1  -4-1  -3-1  -2-1  -1-1  +0-1  +1-1  +2-1  +3-1  +4-1  +5-1  +6-1  +7-1

               MLRF
   -7+0  -5+0  -5+0  -4+0  -3+0  -2+0  -1+0  +0+0  +1+0  +2+0  +3+0  +4+0  +5+0  +6+0  +7+0

               MRRF
   -7+1  -5+1  -5+1  -4+1  -3+1  -2+1  -1+1  +0+1  +1+1  +2+1  +3+1  +4+1  +5+1  +6+1  +7+1

               MLEY
   -7+2  -5+2  -5+2  -4+2  -3+2  -2+2  -1+2  +0+2  +1+2  +2+2  +3+2  +4+2  +5+2  +6+2  +7+2

               MREY
   -7+3  -5+3  -5+3  -4+3  -3+3  -2+3  -1+3  +0+3  +1+3  +2+3  +3+3  +4+3  +5+3  +6+3  +7+3


   -7+4  -5+4  -5+4  -4+4  -3+4  -2+4  -1+4  +0+4  +1+4  +2+4  +3+4  +4+4  +5+4  +6+4  +7+4


   -7+5  -5+5  -5+5  -4+5  -3+5  -2+5  -1+5  +0+5  +1+5  +2+5  +3+5  +4+5  +5+5  +6+5  +7+5
..
  */
  // Mon Jun 24 23:23:51 2024 Layout210: TOCK becomes a sensor
  //                                  SUPR SUPY SLFR SLFY SRFR SRFY MLRF MRRF GRIP TOCK SLLY SLRY SRLY SRRY MLEY MREY
  //  constant C2DC cDESTS_X[cTARGETS] = {  +4,  +5,  -4,  -3,  -2,  -1,  -5,  -5, -5, +6,  +0,  +1,  +2,  +3,  -5,  -5  };
  //  constant C2DC cDESTS_Y[cTARGETS] = {  -1,  -1,  -1,  -1,  -1,  -1,  +0,  +1, -1, -1,  -1,  -1,  -1,  -1,  +2,  +3  };

  /*


   -7-2  -5-2  -5-2  -4-2  -3-2  -2-2  -1-2  +0-2  +1-2  +2-2  +3-2  +4-2  +5-2  +6-2  +7-2

               GRIP  SLFR  SLFY  SRFR  SRFY  SLLY  SLRY  SRLY  SRRY  SUPR  SUPY
   -7-1  -5-1  -5-1  -4-1  -3-1  -2-1  -1-1  +0-1  +1-1  +2-1  +3-1  +4-1  +5-1  +6-1  +7-1

               MLRF
   -7+0  -5+0  -5+0  -4+0  -3+0  -2+0  -1+0  +0+0  +1+0  +2+0  +3+0  +4+0  +5+0  +6+0  +7+0

               MRRF
   -7+1  -5+1  -5+1  -4+1  -3+1  -2+1  -1+1  +0+1  +1+1  +2+1  +3+1  +4+1  +5+1  +6+1  +7+1

               TOCK
   -7+2  -5+2  -5+2  -4+2  -3+2  -2+2  -1+2  +0+2  +1+2  +2+2  +3+2  +4+2  +5+2  +6+2  +7+2

               MLEY
   -7+3  -5+3  -5+3  -4+3  -3+3  -2+3  -1+3  +0+3  +1+3  +2+3  +3+3  +4+3  +5+3  +6+3  +7+3

               MREY
   -7+4  -5+4  -5+4  -4+4  -3+4  -2+4  -1+4  +0+4  +1+4  +2+4  +3+4  +4+4  +5+4  +6+4  +7+4


   -7+5  -5+5  -5+5  -4+5  -3+5  -2+5  -1+5  +0+5  +1+5  +2+5  +3+5  +4+5  +5+5  +6+5  +7+5
..
tile 1                                                                                  tile 3
   -7+B  -5+B  -5+B  -4+B  -3+B  -2+B  -1+B  +0+B  +1+B  +2+B  +3+B  +4+B  +5+B  +6+B  +7+B


   -7+C  -5+C  -5+C  -4+C  -3+C  -2+C  -1+C  +0+C  +1+C  +2+C  +3+C  +4+C  +5+C  +6+C  +7+C


   -7+D  -5+D  -5+D  -4+D  -3+D  -2+D  -1+D  +0+D  +1+D  +2+D  +3+D  +4+D  +5+D  +6+D  +7+D


   -7+E  -5+E  -5+E  -4+E  -3+E  -2+E  -1+E  +0+E  +1+E  +2+E  +3+E  +4+E  +5+E  +6+E  +7+E


                                            tile 2
    */

  /*


   -7-2  -5-2  -5-2  -4-2  -3-2  -2-2  -1-2  +0-2  +1-2  +2-2  +3-2  +4-2  +5-2  +6-2  +7-2


   -7-1  -5-1  -5-1  -4-1  -3-1  -2-1  -1-1  +0-1  +1-1  +2-1  +3-1  +4-1  +5-1  +6-1  +7-1

                                             GRIP
   -7+0  -5+0  -5+0  -4+0  -3+0  -2+0  -1+0  +0+0  +1+0  +2+0  +3+0  +4+0  +5+0  +6+0  +7+0

                           SLFR                                SRFR
   -7+1  -5+1  -5+1  -4+1  -3+1  -2+1  -1+1  +0+1  +1+1  +2+1  +3+1  +4+1  +5+1  +6+1  +7+1

                     SLFY                                            SRFY
   -7+2  -5+2  -5+2  -4+2  -3+2  -2+2  -1+2  +0+2  +1+2  +2+2  +3+2  +4+2  +5+2  +6+2  +7+2


   -7+3  -5+3  -5+3  -4+3  -3+3  -2+3  -1+3  +0+3  +1+3  +2+3  +3+3  +4+3  +5+3  +6+3  +7+3

               MLRF                                                        MRRF
   -7+4  -5+4  -5+4  -4+4  -3+4  -2+4  -1+4  +0+4  +1+4  +2+4  +3+4  +4+4  +5+4  +6+4  +7+4

                                       SUPR        SUPR
   -7+5  -5+5  -5+5  -4+5  -3+5  -2+5  -1+5  +0+5  +1+5  +2+5  +3+5  +4+5  +5+5  +6+5  +7+5
..
tile 1                                                                                  tile 3
   -7+B  -5+B  -5+B  -4+B  -3+B  -2+B  -1+B  +0+B  +1+B  +2+B  +3+B  +4+B  +5+B  +6+B  +7+B

   SLLY                                                                                SRLY
   -7+C  -5+C  -5+C  -4+C  -3+C  -2+C  -1+C  +0+C  +1+C  +2+C  +3+C  +4+C  +5+C  +6+C  +7+C

   SLRY        MLEY                                                        MREY        SRRY
   -7+D  -5+D  -5+D  -4+D  -3+D  -2+D  -1+D  +0+D  +1+D  +2+D  +3+D  +4+D  +5+D  +6+D  +7+D


   -7+E  -5+E  -5+E  -4+E  -3+E  -2+E  -1+E  +0+E  +1+E  +2+E  +3+E  +4+E  +5+E  +6+E  +7+E


                                            tile 2
                                             TOCK
                                              vv
    */

  // Mon Jun 10 13:49:06 2024 Layout19: First cut at sensorimotor crossbar
  //                                  SUPR SUPY SLFR SLFY SRFR SRFY MLRF MRRF GRIP TOCK SLLY SLRY SRLY SRRY MLEY MREY
  //constant C2DC cDESTS_X[cTARGETS] = {  +4,  +5,  -4,  -3,  -2,  -1,  -5,  -5, -5, -5,  +0,  +1,  +2,  +3,  -5,  -5  };
  //constant C2DC cDESTS_Y[cTARGETS] = {  -1,  -1,  -1,  -1,  -1,  -1,  +0,  +1, -1, +2,  -1,  -1,  -1,  -1,  +3,  +4  };

  // Mon May 13 11:32:14 2024 Layout18: 'Add SLLY SLRY SRLY SRRY MLEY MREY'
  //                                  SUPR SUPY SLFR SLFY SRFR SRFY MLRF MRRF GRIP TOCK SLLY SLRY SRLY SRRY MLEY MREY
  //constant C2DC cDESTS_X[cTARGETS] = {  -1,  +1,  -3,  -4,  +3,  +4,  -5,  +5, +0, +0,  -8,  -8,  +8,  +8,  -7,  +7  };
  //constant C2DC cDESTS_Y[cTARGETS] = {  +5,  +5,  +1,  +2,  +1,  +2,  +4,  +4, +0, +23, +13, +14, +13, +14, +14, +14 };

  // Thu May  2 12:54:23 2024 Layout17: 'Add TOCK'
  //                                              SUPR SUPY SLFR SLFY SRFR SRFY MLRF MRRF GRIP TOCK
  //constant C2D.Coord cTARGET_DESTS_X[cTARGETS] = {  -1,  +1,  -3,  -4,  +3,  +4,  -5,  +5, +0, +0 };
  //constant C2D.Coord cTARGET_DESTS_Y[cTARGETS] = {  +5,  +5,  +1,  +2,  +1,  +2,  +4,  +4, +0, +23 };

  // Sun Mar 31 20:43:55 2024 Layout16: 'Push everything down and raise 0,0; spread SL/SR'
  //                                              SUPR SUPY SLFR SLFY SRFR SRFY MLRF MRRF GRIP
  //constant C2D.Coord cTARGET_DESTS_X[cTARGETS] = {  -1,  +1,  -3,  -4,  +3,  +4,  -5,  +5, +0 };
  //constant C2D.Coord cTARGET_DESTS_Y[cTARGETS] = {  +5,  +5,  +1,  +2,  +1,  +2,  +4,  +4, +0 };

  //  //                                              SUPR SUPY SLFR SLFY SRFR SRFY MLRF MRRF
  //  constant C2D.Coord cTARGET_DESTS_X[cTARGETS] = { -11, +11, -11, -10, +11, +11, -11, +11 };
  //  constant C2D.Coord cTARGET_DESTS_Y[cTARGETS] = { -12, -12, -11, -11, -11, -11, +11, +11 };

  // Sat Mar 30 09:17:31 2024 Layout11: 'Tight sensors, single ITC crossing'
  //                                              SUPR SUPY SLFR SLFY SRFR SRFY MLRF MRRF
  //  constant C2D.Coord cTARGET_DESTS_X[cTARGETS] = {  +0,  +0,  -3,  -4,  +3,  +4, -13, +13 };
  //  constant C2D.Coord cTARGET_DESTS_Y[cTARGETS] = {  +0,  -2,  -1,  +0,  -1,  +0,  +2,  +2 };

  // Sat Mar 30 21:08:41 2024 Layout12: 'Tight everything, zero ITC crossings'
  //                                              SUPR SUPY SLFR SLFY SRFR SRFY MLRF MRRF GRIP
  //  constant C2D.Coord cTARGET_DESTS_X[cTARGETS] = {  +0,  +0,  -2,  -3,  +2,  +3,  -6,  +6, +0 };
  //  constant C2D.Coord cTARGET_DESTS_Y[cTARGETS] = {  -1,  -2,  -1,  +0,  -1,  +0,  +1,  +1, +3};

  // Sun Mar 31 11:38:45 2024 Layout13: 'Raise everything to allow GRIP at 0,0';
  //                                              SUPR SUPY SLFR SLFY SRFR SRFY MLRF MRRF GRIP
  //  constant C2D.Coord cTARGET_DESTS_X[cTARGETS] = {  -1,  +1,  -2,  -3,  +2,  +3,  -6,  +6, +0 };
  //  constant C2D.Coord cTARGET_DESTS_Y[cTARGETS] = {  +2,  +2,  -3,  -2,  -3,  -2,  +1,  +1, +0 };

  // Sun Mar 31 11:57:59 2024 Layout14: 'Push everything down and raise 0,0'
  //                                              SUPR SUPY SLFR SLFY SRFR SRFY MLRF MRRF GRIP
  //  constant C2D.Coord cTARGET_DESTS_X[cTARGETS] = {  -1,  +1,  -2,  -3,  +2,  +3,  -5,  +5, +0 };
  //  constant C2D.Coord cTARGET_DESTS_Y[cTARGETS] = {  +5,  +5,  +1,  +2,  +1,  +2,  +4,  +4, +0 };

  // Sun Mar 31 18:14:59 2024 Layout15: Layout11 redo with GRIP 'Tight sensors, single ITC crossing'
  //                                              SUPR SUPY SLFR SLFY SRFR SRFY MLRF MRRF GRIP
  //  constant C2D.Coord cTARGET_DESTS_X[cTARGETS] = {  -1,  +1,  -3,  -4,  +3,  +4, -13, +13,  +0 };
  //  constant C2D.Coord cTARGET_DESTS_Y[cTARGETS] = {  +3,  +3,  -1,  +0,  -1,  +0,  +2,  +2,  +0 };


  Unsigned getTargetCount() { BeeveeBIM bim; return bim.getTAPCount(); }
  TermTarget getTermTarget(Unsigned idx) {
    TermTarget tt;
    tt.mTermName = getClassNameFromTapIdx(idx);
    tt.mLocation = C2D.instanceof(cDESTS_X[idx],cDESTS_Y[idx]);
    tt.mXBSSy = cSYMS[idx];
    return tt;
  }

  Unsigned getTapIdxAt(C2D c) {
    for (Unsigned i = 0u; i < cDESTS_X.lengthof; ++i) {
      if (c.x == cDESTS_X[i] && c.y == cDESTS_Y[i])
        return i;
    }
    return Unsigned.maxof;
  }
}

quark TermTarget + DTU {
  String mTermName;
  C2D mLocation;
  XBSSy mXBSSy;

  Atom makeTermTarget() {
    DebugUtils du;
    //    du.print("TETAR10");
    //    du.print(mTermName);
    Int etype = getClassIdOfElementNamed(mTermName);
    if (etype < 0) {
      du.print("makeTermTarget: NO ETYPE FOR:");
      du.print(mTermName);
      return Empty.instanceof;
    }
    //    du.print("TETAR11");
    //    du.print(etype);
    AtomUtils au;
    Atom a = au.new(etype);
    //    du.print(a);
    return a;
  }

}

element DeliverTerm + DTU + QDebugUtils {
  TapIdx mTermTargetIdx = TapIdx.maxof;

  typedef Unsigned(7) FailureCount;
  FailureCount mFailures;

  Void behave() {
    TermTargetLibrary ttl;
    mD&&pR("DTBV10");
    if (mTermTargetIdx >= ttl.getTargetCount())
      return die();
    mD&&pR("DTBV11");
    TermTarget tt = ttl.getTermTarget(mTermTargetIdx);
    C2D targc = tt.mLocation;
    mD&&pR(targc);
    mD&&pR(tt);

    MinXPick minerr;
    EventWindow ew;
    for (SN sn = 0u; sn < 41u; ++sn) {
      if (!ew.isAccessible(sn)) continue;
      Atom & a = ew[sn];
      //      if (a as LocalSpace2D) {
      if (a as LocalSpaceRect2D) {
        if (!a.isInitted()) continue;
        C2D pos = a.getPos2D();
        Unsigned err = pos.manhattanDistance(targc);
        minerr.update(sn,err);
      }
    }
    mD&&pR("DTBV12");
    mD&&pR(minerr);
    if (!minerr.hasPick()) {
      if (++mFailures == mFailures.maxof)
        return die();
      return;
    }

    SN minsn = minerr.getIdxSN();
    C2D minc = ew.getCoord(minsn);
    MinXPick minemp;
    for (SN sn = 0u; sn < 41u; ++sn) {
      if (!ew.isAccessible(sn)) continue;
      Atom & a = ew[sn];
      if (a is Empty || a is HALT) { // delivered terms displace HALTs
        C2D c = ew.getCoord(sn);
        Unsigned dist = minc.manhattanDistance(c);
        minemp.update(sn,dist);
      }
    }
    mD&&pR("DTBV13");
    mD&&pR(minemp);
    if (!minemp.hasPick()) return;
    SN empsn = minemp.getIdxSN();

    mD&&pR("DTBV14");
    mD&&pR(minerr);
    mD&&pR(empsn);

    if (minerr.getX() == 0u && minemp.getX() < 2u)    // Found target and good empty?
      ew[empsn] = tt.makeTermTarget(); // DEPLOY DEPLOY DEPLOY
    else
      ew[empsn] = ew[0u];       // otherwise advance

    mD&&pR("DTBV15");
    mD&&pR(ew[empsn]);

    ew[0u] = Empty.instanceof;
  }
}
