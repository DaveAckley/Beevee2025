/** CLOK DRIVER.
    \symbol CL
    \color #556677
*/
element CLOK : HOpNullary + Fail {

  //// CLOK State
  typedef Unsigned(2) SigState;
  constant SigState cCLOK_SIG0 = 0u; //< last sample sig is 0
  constant SigState cCLOK_SIGL = 1u; //< last sample sig is low but not 0
  constant SigState cCLOK_SIGH = 2u; //< last sample sig is high but not 255
  constant SigState cCLOK_SIG1 = 3u; //< last sample sig is 255

  SigState mSigVals[2];         // [0] left, [1] right (both front)

  typedef Unary(2) ClokState;
  constant ClokState cCLOK_TICK = 0u; //< left high, right low
  constant ClokState cCLOK_TOCK = 1u; //< left low, right high
  constant ClokState cCLOK_NONE = 2u; //< unsettled state

  ClokState mClokState = cCLOK_NONE;

  //// UrSelf API
  @Override virtual ARGB getColor(Unsigned selector) {
    ColorUtils cu;
    if (mClokState == cCLOK_TICK) return cu.color(0xff3311dd);
    if (mClokState == cCLOK_TOCK) return cu.color(0xff33dd11);
    return super.getColor(selector);
  } 

  //// TermHOp API
  @Override
  virtual Bool isEnabled(Unsigned gripnum) { return true; } // (same as TermHOp but for doc here)

  //// HOpArgsT/HOpNullary API
  @Override
  virtual Int sigToSlot(SlotSig sig, Unsigned gripnum) {
    mD&&pR("S2SCLOK10")&&pR(self);
    if (!sig.isOccupied()) return -1; // won't happen?
    mD&&pR("S2SCLOK11")&&pR(self);
    if (!isEnabled(gripnum)) return 0; // toss it if not enabled in grip
    mD&&pR("S2SCLOK12")&&pR(self);

    BeeveeBIM bim;
    TapIdx idx = sig.mSource;
    if (idx == bim.getTapIdxFromClassId(SFLG.classidof)) // front left grey
      return updateClokSig(0,sig.mValue);             
    if (idx == bim.getTapIdxFromClassId(SFRG.classidof)) { // front right grey
      return updateClokSig(1,sig.mValue);             
    }
    return 0;                   // or just toss it
  }

  //// CLOK SERVICES
  SigState sigValToSigState(ASCII sigval) {
    if (sigval == 0u)   return cCLOK_SIG0;
    if (sigval == 255u) return cCLOK_SIG1;
    if (sigval <= 127)  return cCLOK_SIGL;
    /*(sigval > 127)*/  return cCLOK_SIGH;
  }

  Int updateClokSig(Unsigned idx, ASCII sigval) {
    SigState newstate = sigValToSigState(sigval);
    if (newstate != mSigVals[idx]) {
      mSigVals[idx] = newstate;
      //      mDoUpdate = true;
    }
    return 0;
  }

  //  Bool mDoUpdate;

  //// UrSelf API
  @Override Void renderGraphics() {
    Drawable drawable;
    if (!drawable.canDraw()) return;
    super.renderGraphics();

    SN sn;
    if (mClokState == cCLOK_TICK) sn = 1u;
    else if (mClokState == cCLOK_TOCK) sn = 4u;
    else return;                             // else nothing special

    ARGB col = getColor(1u);
    FWTD tmp;
    tmp.renderBond(sn, 200u, col); // double SN spacing?
  }

  constant Unsigned cGRIPBITS = XBarSpace2D.cGRIPBITS;
  typedef Unsigned(cGRIPBITS) GripStg;

  //// TermHOp API
  @Override
    virtual Bool execute(SlotSig & result) {
    mD&&pR("CLOKX10")&&pR(self);

    /// REFRESH GRIPNUM
    SN sn = 2u;
    if (!ew.isAccessible(sn)) return false;
    if (!(ew[sn] is XBarSpace2D)) { die(); return false; }
    XBarSpace2D & xb = (XBarSpace2D&) ew[sn];
   
    mD&&pR("CLOKX11")&&pR(xb);

    if (!xb.hasSymmetry()) return false; // too soon?

    Unsigned gripnum = getGripNumber(); // our current grip
    if (gripnum != xb.getGripNumber()) {
      gripnum = xb.getGripNumber();
      setGripNumber(gripnum);
      mD&&pR("CLOKX12")&&pR(self);
    }

    GripInfoMap gim(self);
    if (gripnum != gim.cGRIP_TRACK)
      return false;

    /// DO CLOK UPDATE
    ClokState newstate;
    if (mSigVals[0] == cCLOK_SIG1 && mSigVals[1] == cCLOK_SIG0)
      newstate = cCLOK_TICK;
    else if (mSigVals[0] == cCLOK_SIG0 && mSigVals[1] == cCLOK_SIG1)
      newstate = cCLOK_TOCK;
    else
      newstate = cCLOK_NONE;

    Bool change = newstate != mClokState;
    Random random;
    if (change) mClokState = newstate;
    if (change || random.oneIn(2u)) {
      trySendSigViaTAP((ASCII) mClokState, GTCC.classidof);
    }
    //    mDoUpdate = false;
    return false; // NOT REACHED
  }

  Bool trySendSigOLD(ASCII sig, ClassId toclassid) {
    BeeveeBIM bim;
    TapIdx mytapidx = bim.getTapIdx(self);
    Unsigned themt = bim.getTapIdxFromClassId(toclassid);
    if (themt == Unsigned.maxof)
      fail(__FILE__,__LINE__);
    TapIdx themtapidx = (TapIdx) themt;
    SN axonsn = findMatchingAxonEndWithClassId(toclassid);
    if (axonsn != SN.maxof) {
      AxonEnd & axon = (AxonEnd&) ew[axonsn];
      mD&&pR("TMTOR14")&&pR(axonsn);
      SlotSig oss;
      oss.mValue = sig;
      oss.mSource = mytapidx;
      return trySendSig(axon,oss);
    }
    // no axon
    MinXPick emppick;
    Random random;
    EventWindow ew;
    for (SN sn = 1u; sn < 41u; ++sn) {
      if (!ew.isAccessible(sn)) continue;
      if (sn <= 8u && ew[sn] is Empty) emppick.update(sn);
      if (ew[sn] is FloodFind) 
        return false;          // Flooding in progress
    }
    if (emppick.hasPick()) {
      SN empsn = emppick.getIdxSN();
      FloodFindTAPIdx fix;
      fix.mBranchOK = true;      // XXXX TESTING DENDRITIC TREES
      fix.mMaxRadius = 20u;
      fix.mLocal = mytapidx;
      fix.mRemote = themtapidx;
      mD&&pR("TOPHSH17")&&pR(fix);
      ew[empsn] = fix.atomof;
    }
    return false;
  }

  Unsigned getGreen(Bool wantLeft) {
    SlotSig & iss = getSlotSig(wantLeft ? 0u : 1u);
    if (!iss.isOccupied()) return Unsigned.maxof;
    Unsigned ret = iss.mValue;
    return ret;
  }

  Void resetGreen(Bool wantLeft) {
    SlotSig & iss = getSlotSig(wantLeft ? 0u : 1u);
    iss.reset();
  }

  Unsigned getTotalGreen() {
    Unsigned leftg = getGreen(true);
    Unsigned rightg = getGreen(false);
    if (leftg == Unsigned.maxof ||
        rightg == Unsigned.maxof)
      return Unsigned.maxof;
    resetGreen(true);            // don't reset til we have a pair
    resetGreen(false);
    return leftg + rightg;
  }

  /*
  constant Int cLEFT_ROTATION_SPEED = -7; // slower backwards
  constant Int cRIGHT_ROTATION_SPEED = 20; // faster forwards
  Void sitAndRotate() {
    getSlotSig(0u).reset();      // discard any
    getSlotSig(1u).reset();      // leftover signals
    ASCII psb = intToSignedAscii(cRIGHT_ROTATION_SPEED);
    ASCII nsb = intToSignedAscii(cLEFT_ROTATION_SPEED);
    trySendSig(nsb,MLRF.classidof);
    trySendSig(psb,MRRF.classidof);
  }
  */

  Bool mapioOLD(Int vl, Int vc, Int vr, Int & trackingError) {
    Bool old = mD;
    //mD = true;

    mD&&pR("TKMPO10")&&pR(vl)&&pR(vc)&&pR(vr);

    Unsigned dd = abs(vl-vr);    // dist btwn left and right
    Unsigned ld = abs(vl-vc);    // dist btwn left and center
    Unsigned rd = abs(vr-vc);    // dist btwn right and center

    mD&&pR("TKMPO11")&&pR(dd)&&pR(ld)&&pR(rd);

    Int c = (Int) rd - (Int) ld; // >0 center too left (rd too big), <0 center too right (ld too big)
    Unsigned ac = abs(c);
    Bool valid;
   
    mD&&pR("TKMPO12")&&pR(c)&&pR(ac)&&pR(valid);

    constant Unsigned cTHRESH = 25u;
    constant Int cMAXERR = 2;
    if (dd < cTHRESH) {          // CASE: L+R are similar (so not tracking)
      trackingError = (true /*vl < cTHRESH*/) ? 1 : -1; // note: terr set even if !valid
      valid = false;
      mD&&pR("TKMPO13")&&pR(trackingError)&&pR(valid);
    } else if (c == 0) {         // CASE: we're dead on
      trackingError = 0;
      valid = true;
      mD&&pR("TKMPO14")&&pR(trackingError)&&pR(valid);
    } else if (ac < cTHRESH) {   // CASE: we're close
      Random random;
      if (random.oneIn(3))          // only correct rarely if close
        trackingError = c/(Int) ac; //   err = +- 1
      else
        trackingError = 0;
      valid = true;
      mD&&pR("TKMPO15")&&pR(trackingError)&&pR(valid);
    } else {
      trackingError = max(-cMAXERR,min(cMAXERR,c/(3*cTHRESH))); // CASE: we're not so close
      valid = true;
      mD&&pR("TKMPO16")&&pR(trackingError)&&pR(valid);
    }
   
    mD&&pR("TKMPO17")&&pR(trackingError)&&pR(valid);
    mD = old;

    return valid;
  }

  Bool mapio(Int vl, Int vc, Int vr, Int & trackingError) {  //< trackingError set in -32..32 (now) I think
    Bool old = mD;
    //mD = true;

    mD&&pR("TKMPO10")&&pR(vl)&&pR(vc)&&pR(vr);

    Unsigned dd = abs(vl-vr);    // dist btwn left and right
    Unsigned ld = abs(vl-vc);    // dist btwn left and center
    Unsigned rd = abs(vr-vc);    // dist btwn right and center

    mD&&pR("TKMPO11")&&pR(dd)&&pR(ld)&&pR(rd);

    // trackingError: >0 center too left (rd too big), <0 center too right (ld too big)
    //   dividing by eight to reduce max from 256ish to 32ish, to help fixed point
    trackingError = ((Int) rd - (Int) ld)/8;
    Unsigned ac = abs(trackingError);
    Bool valid;
   
    mD&&pR("TKMPO12")&&pR(trackingError)&&pR(ac)&&pR(valid);

    constant Unsigned cTHRESH = 200u;
    if (dd < cTHRESH) {          // CASE: L+R are similar (so not tracking)
      valid = false;
      mD&&pR("TKMPO13")&&pR(trackingError)&&pR(valid);
    } else {
      valid = true;
      mD&&pR("TKMPO14")&&pR(trackingError)&&pR(valid);
    }
   
    mD&&pR("TKMPO17")&&pR(trackingError)&&pR(valid);
    mD = old;

    return valid;
  }


  /*
  Void driveBothMotors(ASCII left, ASCII right) {
    SN axonsnL = findMatchingAxonEndWithClassId(MLRF.classidof);
    SN axonsnR = findMatchingAxonEndWithClassId(MRRF.classidof);
    if (axonsnL != SN.maxof && axonsnR != SN.maxof) { // special checks if both axons in
      AxonEnd & axonL = (AxonEnd&) ew[axonsnL];
      SlotSig & osL = axonL.getEndSlotSig(false); // get outbound
      if (osL.isOccupied()) return;               // don't ship either..

      AxonEnd & axonR = (AxonEnd&) ew[axonsnR];
      SlotSig & osR = axonR.getEndSlotSig(false); // get outbound
      if (osR.isOccupied()) return;               // ..unless both can ship
    }
    trySendSig(left,MLRF.classidof);
    trySendSig(right,MRRF.classidof);
  }
  */

  Void tryChangeGripNumber(Unsigned newgripnum) {
    EventWindow ew;
    MinXPick emptypick;         // Look for an empty
    for (SN sn = 1u; sn < 41u; ++sn) {
      if (!ew.isAccessible(sn)) continue;
      if (!(ew[sn] is Empty)) continue;
      C2D csn = ew.getCoord(sn);
      emptypick.update(sn,csn.length());
    }
    if (emptypick.hasPick()) {
      setGripNumber(newgripnum);
      SendGrip sg(newgripnum);
      SN esn = emptypick.getIdxSN();
      ew[esn] = sg.atomof;
    }
  }

}


