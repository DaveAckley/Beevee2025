transient GripInfoMap + DTU + QDebugUtils {
  Self(QDebugUtils& du) { takeDebug(du); }
  
  //// GripInfoMap SERVICES
  constant Unsigned cGRIP_HUNTR = 0u;
  constant Unsigned cGRIP_BV2BY = 1u;
  constant Unsigned cGRIP_NORED = 2u;
  constant Unsigned cGRIP_TRAVL = 3u;
  constant Unsigned cGRIP_TURNW = 4u; //< handled by OrientGrip
  constant Unsigned cGRIP_TURNN = 5u; //< handled by OrientGrip
  constant Unsigned cGRIP_TURNS = 6u; //< handled by OrientGrip
  constant Unsigned cGRIP_TURNE = 7u; //< handled by OrientGrip
  constant Unsigned cGRIP_TRACK = 8u; //< handled by TrackGrip

  constant Unsigned cMAX_RECAST_SIZE = 4096u;
  typedef BitStorageT(cMAX_RECAST_SIZE) GripInfoBuffer;
  GripInfoBuffer mGripInfoBuffer;

  ClassId getGripInfoClassId(Unsigned gripnum) {
    which (gripnum) {
      case cGRIP_HUNTR: { return HunterGripInfo.classidof; }
      case cGRIP_BV2BY: { return BV2BYGripInfo.classidof; }
      case cGRIP_NORED: { return NoRedGripInfo.classidof; }
      case cGRIP_TRAVL: { return TravelGripInfo.classidof; }
      case cGRIP_TURNW: { return OrientGripInfo.classidof; }
      case cGRIP_TURNN: { return OrientGripInfo.classidof; }
      case cGRIP_TURNS: { return OrientGripInfo.classidof; }
      case cGRIP_TURNE: { return OrientGripInfo.classidof; }
      case cGRIP_TRACK: { return TrackGripInfo.classidof; }
    }
    return 0u;
  }

  GripInfo & getGripInfo(ClassId classid) {
    mD&&pR("GGRINF10")&&pR(classid);
    UrSelf & ur = mGripInfoBuffer.recast(classid,true);
    mD&&pR("GGRINF11")&&pR(ur);
    GripInfo & gripinfo = (GripInfo&) ur;
    mD&&pR("GGRINF12")&&pR(gripinfo);
    return gripinfo;
  }

  Bool isOrientGripNum(Unsigned gripnum) {
    return
      (gripnum >= cGRIP_TURNW) &&
      (gripnum <= cGRIP_TURNE);
  }
}

quark GripInfo + DTU + QDebugUtils + Fail {
  //// GripInfo API
  typedef ClassUtils.ClassId ClassId;
  typedef ClassId SenseDests[4];
  constant ClassId cNULLID = 0u;
  constant SenseDests cSD_NONE = { };

  virtual ARGB getGripColor(Unsigned selector) ;
  virtual String getGripName() ;
  virtual SenseDests getDestinations(ClassId forSensor) ;
  /** modify \c value in place, \return true to ship the signal, false to dump it */
  virtual Bool mapSourceSignalValue(ClassId forSensor, ClassId forDest, ASCII & value) {
    return true;                // default: ship with identity map
  }
  virtual Unsigned getNextGripNumber(Grip& grip) ;

  //// GripInfo SERVICES
  // Do grey processing in all grips?
  constant SenseDests cSD_SFLG = { HFLG.classidof, CLOK.classidof, cNULLID };
  constant SenseDests cSD_SFRG = { HFRG.classidof, CLOK.classidof, cNULLID };
  constant SenseDests cSD_SRLG = { HRLG.classidof, cNULLID };
  constant SenseDests cSD_SRRG = { HRRG.classidof, cNULLID };

  constant SenseDests cSD_IFLG = { HPDF.classidof, HFQA.classidof, cNULLID };
  constant SenseDests cSD_IFRG = { HPDF.classidof, HFQA.classidof, cNULLID };
  constant SenseDests cSD_IRLG = { HPDR.classidof, HFQA.classidof, cNULLID };
  constant SenseDests cSD_IRRG = { HPDR.classidof, HFQA.classidof, cNULLID };

  // CLOK distribution?
  //constant SenseDests cSD_GTCC = { cNULLID };
  
  SenseDests getDefaultDestinations(ClassId sensid) {
    which (sensid) {

      // Grey processing in all grips
      case SFLG.classidof: { return cSD_SFLG; }
      case SFRG.classidof: { return cSD_SFRG; }
      case SRLG.classidof: { return cSD_SRLG; }
      case SRRG.classidof: { return cSD_SRRG; }

      case IFLG.classidof: { return cSD_IFLG; }
      case IFRG.classidof: { return cSD_IFRG; }
      case IRLG.classidof: { return cSD_IRLG; }
      case IRRG.classidof: { return cSD_IRRG; }
        
    }
    return cSD_NONE;
  }

}


