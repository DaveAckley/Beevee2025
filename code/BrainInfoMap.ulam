quark TermTarget + DTU {
  String mTermName;
  C2D mLocation;
  XBSSy mXBSSy;

  Atom makeTermTarget() {
    DebugUtils du;
    //    du.print("TETAR10");
    //    du.print(mTermName);
    Int etype = getClassIdOfElementNamed(mTermName);
    if (etype < 0) {
      du.print("makeTermTarget: NO ETYPE FOR:");
      du.print(mTermName);
      return Empty.instanceof;
    }
    //    du.print("TETAR11");
    //    du.print(etype);
    AtomUtils au;
    Atom a = au.new(etype);
    //    du.print(a);
    return a;
  }
}

transient BrainInfoMap + DTU + QDebugUtils + Fail {
  constant Unsigned cMAX_RECAST_SIZE = 4096u;
  typedef BitStorageT(cMAX_RECAST_SIZE) XBInfoBuffer;

  //// BrainInfoMap API
  virtual Unsigned getXBCount() ;
  virtual Unsigned getContainingXBIndex(C2D absc) ;
  virtual XBInfo & getXBInfo(Unsigned idx, XBInfoBuffer buf) ;
  virtual Unsigned getTapIdxFromClassId(ClassId cid) ;

  virtual Unsigned getTAPCount() ;  
  virtual ClassId getTAPClassIdFromTapIdx(Unsigned tapidx) ;  
  virtual String getTAPNameFromTapIdx(Unsigned tapidx) ;  

  //// BrainInfoMap SERVICES
  TapIdx getTapIdx(TAP & tap) {
    ClassUtils cu;
    ClassId cid = cu.getClassId(tap);
    Unsigned idx = getTapIdxFromClassId(cid);
    if (idx == idx.maxof) fail(__FILE__,__LINE__);
    return (TapIdx) idx;
  }

}
