element TRAKPD {
  typedef FixedPoint(9u,14u) FP500;
  FP500 mLastError;
  FP500 mIntegralErrors;

  FP500 getKP(FP500 maxspeed, FP500 maxerror) {
    return maxspeed/maxerror;   //< DEFAULT VALUE
  }
  FP500 getKI(FP500 maxspeed, FP500 maxerror) {
    return FP500.instanceof(0);   //< DEFAULT VALUE
  }
  FP500 getKD(FP500 maxspeed, FP500 maxerror) {
    return getKP(maxspeed,maxerror)*FP500.instanceof(4);   //< DEFAULT VALUE: kD = 4*kP
  }

  FP500 getLastError() { return mLastError; }
  Void setLastError(FP500 error) { mLastError = error; }

  FP500 updateError(FP500 thisError, Unsigned pctNew) {
    Int ipct = (Int) pctNew;
    FP500 fracN(ipct,100);
    FP500 fracO(100-ipct,100);
    mLastError = mLastError*fracO + thisError*fracN;
    return mLastError;
  }

  typedef FixedPoint(7u,2u) FP30;
  //FP30 mTargetSpeed;
  FP30 mTargetMaxSpeed;
  FP30 mTargetMinSpeed;

  typedef FP30 MotorSpeeds[2];

  Void update(FP500 linePos, MotorSpeeds speeds) {
    speeds[0].setFraction(3,5);
    speeds[1].setFraction(-5,3);
  }
}

/**
   \color #000
   \symbol Ks
*/
element PDSET + DTU {
  Void behave() {
    EventWindow ew;
    for (SN sn = 1u; sn <= 40u; ++sn) {
      if (!ew.isAccessible(sn)) continue;
      Atom & a = ew[sn];
      if (a as TRAKPD) {
        Random random;
        TRAKPD.FP30 minspeed(random.between(-4,30),2);
        TRAKPD.FP30 spread(random.between(0,30),3);
        TRAKPD.FP30 maxspeed(minspeed+spread);
        a.mTargetMinSpeed = minspeed;
        a.mTargetMaxSpeed = maxspeed;
      }
    }
    ew[0] = Empty.instanceof;
  }
}


